stages:
  pull_data:
    cmd: mkdir -p data/raw && poetry run kaggle competitions download -c playground-series-s4e12
      && mv playground-series-s4e12.zip data/raw/ && cd data/raw/ && unzip playground-series-s4e12.zip
      && rm playground-series-s4e12.zip
    outs:
    - data/raw

  prepare_basic:
    cmd: poetry run python insurance/prepare_basic.py
    deps:
    - insurance/prepare_basic.py
    params:
    - data.random_state
    outs:
    - data/prepared/prepared_data.feather

  tune_xboost:
    cmd: poetry run python insurance/tune_xgboost.py data/prepared/prepared_data.feather
    deps:
    - insurance/tune_xgboost.py
    - data/prepared/prepared_data.feather
    - insurance/data_pipeline.py
    outs:
    - out/xgboost_model_params.yaml
    - out/data_pipeline_tune_xgboost_no_fold.pkl
    frozen: false

  train_xgboost:
    cmd: poetry run python insurance/train_xgboost.py data/prepared/prepared_data.feather
    deps:
      - data/prepared/prepared_data.feather
      - insurance/data_pipeline.py
      - out/xgboost_model_params.yaml
      - out/data_pipeline_tune_xgboost_no_fold.pkl
    outs:
    - out/models/xgboost_folds.pkl
    frozen: false

  # train:
  #   foreach:
  #   - xgboost
  #   do:
  #     cmd: poetry run python insurance/train_${item}.py
  #     deps:
  #     - insurance/train_${item}.py
  #     - data/prepared/prepared_imputed_data.feather
  #     - insurance/data_pipeline.py
  #     outs:
  #     - out/models/model_${item}.pkl
  #     - out/models/data_pipeline_${item}.pkl
  #     params:
  #     - train.random_state
  #     - train.n_splits
  #     - train.${item}
  #     frozen: true



metrics:
- out/metrics.json
- dvclive-optuna/metrics.json
- dvclive/metrics.json
plots:
- out/plots/metrics:
    x: step
- dvclive/plots/custom/loss.json:
    template: linear
    x: epoch
    y:
    - train_loss
    - eval_loss
- dvclive/plots/custom/accuracy.json:
    template: linear
    x: epoch
    y:
    - train_accuracy
    - eval_accuracy
params:
- dvclive-optuna/params.yaml
- dvclive/params.yaml
artifacts:
  pytorch-model:
    path: out/models/torch_imputer.pt
    type: model
